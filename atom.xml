<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nomi Su@Coding</title>
  
  <subtitle>Record all of the coding problem</subtitle>
  <link href="https://jeremysu0131.github.io/atom.xml" rel="self"/>
  
  <link href="https://jeremysu0131.github.io/"/>
  <updated>2021-10-22T04:04:01.108Z</updated>
  <id>https://jeremysu0131.github.io/</id>
  
  <author>
    <name>Jeremy Su</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Laravel] FromRequest 更新驗證</title>
    <link href="https://jeremysu0131.github.io/Laravel-FromRequest-%E6%9B%B4%E6%96%B0%E9%A9%97%E8%AD%89/"/>
    <id>https://jeremysu0131.github.io/Laravel-FromRequest-%E6%9B%B4%E6%96%B0%E9%A9%97%E8%AD%89/</id>
    <published>2021-10-22T03:54:33.000Z</published>
    <updated>2021-10-22T04:04:01.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>使用 laravel 內建的驗證工具會發現一個問題，例如更新時某個欄位設定為 <code>unique</code> 則那個欄位沒辦法更新</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;required|unique:roles&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;readable_name&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;description&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h2><p>透過 <code>ignore</code> 的方式可以忽略檢查自己的資料是否跟資料庫中的重複</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;required&#x27;</span>,</span><br><span class="line">            Rule::unique(<span class="string">&#x27;roles&#x27;</span>)-&gt;ignore(<span class="keyword">$this</span>-&gt;id),</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;readable_name&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;description&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;p&gt;使用 laravel 內建的驗證工具會發現一個問題，例如更新時某個欄位設定為 &lt;code&gt;unique&lt;/code&gt; 則那個欄位沒辦法更新&lt;/p&gt;</summary>
    
    
    
    <category term="Laravel" scheme="https://jeremysu0131.github.io/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://jeremysu0131.github.io/tags/Laravel/"/>
    
    <category term="FromRequest" scheme="https://jeremysu0131.github.io/tags/FromRequest/"/>
    
    <category term="Validation" scheme="https://jeremysu0131.github.io/tags/Validation/"/>
    
  </entry>
  
  <entry>
    <title>Vim 搜尋並刪除</title>
    <link href="https://jeremysu0131.github.io/Vim-%E6%90%9C%E5%B0%8B%E4%B8%A6%E5%88%AA%E9%99%A4/"/>
    <id>https://jeremysu0131.github.io/Vim-%E6%90%9C%E5%B0%8B%E4%B8%A6%E5%88%AA%E9%99%A4/</id>
    <published>2021-07-13T10:12:15.000Z</published>
    <updated>2021-10-22T03:22:07.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刪除每一行包含指定的文字"><a href="#刪除每一行包含指定的文字" class="headerlink" title="刪除每一行包含指定的文字"></a>刪除每一行包含指定的文字</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:g/text/d</span><br></pre></td></tr></table></figure><h2 id="刪除每一行不包含指定的文字"><a href="#刪除每一行不包含指定的文字" class="headerlink" title="刪除每一行不包含指定的文字"></a>刪除每一行不包含指定的文字</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:g!/text/d</span><br></pre></td></tr></table></figure><h2 id="刪除每一行包含指定的文字，並往上刪除幾行"><a href="#刪除每一行包含指定的文字，並往上刪除幾行" class="headerlink" title="刪除每一行包含指定的文字，並往上刪除幾行"></a>刪除每一行包含指定的文字，並往上刪除幾行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:g/text/.,+1d</span><br></pre></td></tr></table></figure><h2 id="刪除每一行包含指定的文字，並往下刪除幾行"><a href="#刪除每一行包含指定的文字，並往下刪除幾行" class="headerlink" title="刪除每一行包含指定的文字，並往下刪除幾行"></a>刪除每一行包含指定的文字，並往下刪除幾行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:g/text/-1,.d</span><br></pre></td></tr></table></figure><h2 id="刪除每一行包含指定的文字，並上下刪除幾行"><a href="#刪除每一行包含指定的文字，並上下刪除幾行" class="headerlink" title="刪除每一行包含指定的文字，並上下刪除幾行"></a>刪除每一行包含指定的文字，並上下刪除幾行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:g/text/-1,+1d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;刪除每一行包含指定的文字&quot;&gt;&lt;a href=&quot;#刪除每一行包含指定的文字&quot; class=&quot;headerlink&quot; title=&quot;刪除每一行包含指定的文字&quot;&gt;&lt;/a&gt;刪除每一行包含指定的文字&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;tab</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[JS] 檢查使用者輸入的任何可能為空的結果</title>
    <link href="https://jeremysu0131.github.io/JS-%E6%AA%A2%E6%9F%A5%E4%BD%BF%E7%94%A8%E8%80%85%E8%BC%B8%E5%85%A5%E7%9A%84%E4%BB%BB%E4%BD%95%E5%8F%AF%E8%83%BD%E7%82%BA%E7%A9%BA%E7%9A%84%E7%B5%90%E6%9E%9C/"/>
    <id>https://jeremysu0131.github.io/JS-%E6%AA%A2%E6%9F%A5%E4%BD%BF%E7%94%A8%E8%80%85%E8%BC%B8%E5%85%A5%E7%9A%84%E4%BB%BB%E4%BD%95%E5%8F%AF%E8%83%BD%E7%82%BA%E7%A9%BA%E7%9A%84%E7%B5%90%E6%9E%9C/</id>
    <published>2019-05-17T10:33:18.000Z</published>
    <updated>2021-06-24T03:55:08.180Z</updated>
    
    <content type="html"><![CDATA[<p>在檢查使用者輸入資料時，常常需要檢查字串是否為空或 null, undefined 等，於是搜尋並整合了許多人的解決方法，可以完全解決這個問題。</p><span id="more"></span><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (!str || str.trim().length === <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>我們先用 <code>!str</code> 來檢查輸入結果是否為 null, undefined</li><li>再來我們用 <code>str.trim().length === 0</code> 來解決輸入為 <code>&#39;&#39;</code> 或 <code>&#39; &#39;</code> 的結果</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;在檢查使用者輸入資料時，常常需要檢查字串是否為空或 null, undefined 等，於是搜尋並整合了許多人的解決方法，可以完全解決這個問題。&lt;/p&gt;</summary>
    
    
    
    <category term="Javascript" scheme="https://jeremysu0131.github.io/categories/javascript/"/>
    
    
    <category term="JavaScript" scheme="https://jeremysu0131.github.io/tags/JavaScript/"/>
    
    <category term="string" scheme="https://jeremysu0131.github.io/tags/string/"/>
    
    <category term="empty" scheme="https://jeremysu0131.github.io/tags/empty/"/>
    
    <category term="undefined" scheme="https://jeremysu0131.github.io/tags/undefined/"/>
    
  </entry>
  
  <entry>
    <title>[JS] Get Image Size Before Upload</title>
    <link href="https://jeremysu0131.github.io/JS-Get-Image-Size-Before-Upload/"/>
    <id>https://jeremysu0131.github.io/JS-Get-Image-Size-Before-Upload/</id>
    <published>2019-01-23T05:38:44.000Z</published>
    <updated>2021-06-24T03:55:08.180Z</updated>
    
    <content type="html"><![CDATA[<p>最近收到一個需求是要讓使用者在上傳前檢查圖片大小有沒有符合規定的尺寸，在查詢了一些資料後歸納出了以下的解決方法。</p><span id="more"></span><h2 id="Sync-Version"><a href="#Sync-Version" class="headerlink" title="Sync Version"></a>Sync Version</h2><p>在 &lt;input type=”file” /&gt; 中傳入的檔案的型態是一個 file ，所以我們要用 <code>Image</code> 來讓使用者上傳的圖片可以被程式讀取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file 是從 input 取得的 value</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSize</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL; <span class="comment">// 檢查各個瀏覽器的 method</span></span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.height, <span class="built_in">this</span>.width);</span><br><span class="line">  &#125;;</span><br><span class="line">  img.src = _URL.createObjectURL(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Async-Version"><a href="#Async-Version" class="headerlink" title="Async Version"></a>Async Version</h2><p>在上面的範例中，我們可以取得圖片的尺寸了，不過如果有很多地方要使用的話，我們必須把這個 funciton 封裝起來，但是 <code>img.onload</code> 這個方法是要在 <code>img.src = _URL.createObjectURL(file);</code> 這行程式碼執行後才能得到資料，所以我們必須將其封裝成<strong>非同步</strong>的方式來等待這個 function 執行完。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSize</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> _URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">    img.onload = <span class="function">() =&gt;</span> resolve(&#123; <span class="attr">height</span>: img.height, <span class="attr">width</span>: img.width &#125;);</span><br><span class="line">    img.onerror = reject;</span><br><span class="line"></span><br><span class="line">    img.src = _URL.createObjectURL(file);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近收到一個需求是要讓使用者在上傳前檢查圖片大小有沒有符合規定的尺寸，在查詢了一些資料後歸納出了以下的解決方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Javascript" scheme="https://jeremysu0131.github.io/categories/javascript/"/>
    
    
    <category term="JavaScript" scheme="https://jeremysu0131.github.io/tags/JavaScript/"/>
    
    <category term="upload" scheme="https://jeremysu0131.github.io/tags/upload/"/>
    
    <category term="image" scheme="https://jeremysu0131.github.io/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>[Nightwatch] Upload file</title>
    <link href="https://jeremysu0131.github.io/Nightwatch-Upload-file/"/>
    <id>https://jeremysu0131.github.io/Nightwatch-Upload-file/</id>
    <published>2018-12-05T09:11:37.000Z</published>
    <updated>2021-06-24T03:55:08.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nightwatch-上傳"><a href="#Nightwatch-上傳" class="headerlink" title="Nightwatch 上傳"></a>Nightwatch 上傳</h1><p>最近在學習如何使用 Nightwatch 來做 E2E 測試，不過發現到上傳功能並沒有出現在官方網站，這邊紀錄一下上傳的方式</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Upload File&quot;</span>: <span class="function"><span class="params">browser</span> =&gt;</span> &#123;</span><br><span class="line">    browser</span><br><span class="line">      .setValue(</span><br><span class="line">        <span class="string">&quot;input[type=file]&quot;</span>,</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>).resolve(__dirname + <span class="string">&quot;/test.jpg&quot;</span>)</span><br><span class="line">      )</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>其實上傳方式很簡單，就像輸入文字框一樣，只不過這邊把輸入的內容改為檔案的路徑，這樣就可以成功上傳了</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Nightwatch-上傳&quot;&gt;&lt;a href=&quot;#Nightwatch-上傳&quot; class=&quot;headerlink&quot; title=&quot;Nightwatch 上傳&quot;&gt;&lt;/a&gt;Nightwatch 上傳&lt;/h1&gt;&lt;p&gt;最近在學習如何使用 Nightwatch 來做 E2E 測試，不過發現到上傳功能並沒有出現在官方網站，這邊紀錄一下上傳的方式&lt;/p&gt;</summary>
    
    
    
    <category term="Nightwatch" scheme="https://jeremysu0131.github.io/categories/Nightwatch/"/>
    
    
    <category term="upload" scheme="https://jeremysu0131.github.io/tags/upload/"/>
    
    <category term="test" scheme="https://jeremysu0131.github.io/tags/test/"/>
    
    <category term="nightwatch" scheme="https://jeremysu0131.github.io/tags/nightwatch/"/>
    
  </entry>
  
  <entry>
    <title>[axios] 處理 x-www-form-urlencoded 格式問題</title>
    <link href="https://jeremysu0131.github.io/axios-%E8%99%95%E7%90%86-x-www-form-urlencoded-%E6%A0%BC%E5%BC%8F%E5%95%8F%E9%A1%8C/"/>
    <id>https://jeremysu0131.github.io/axios-%E8%99%95%E7%90%86-x-www-form-urlencoded-%E6%A0%BC%E5%BC%8F%E5%95%8F%E9%A1%8C/</id>
    <published>2018-11-26T02:46:32.000Z</published>
    <updated>2021-06-24T03:55:08.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>axios 是基於 Promise 的瀏覽器與 node.js 的客戶端。使用的方式非常簡單清楚，安裝與使用<a href="https://github.com/axios/axios">官方網站</a>都寫的非常詳細。</p><span id="more"></span><h2 id="x-www-form-urlencoded"><a href="#x-www-form-urlencoded" class="headerlink" title="x-www-form-urlencoded"></a>x-www-form-urlencoded</h2><p>這是 HTTP POST 中很常見的提交數據的方式，通過 <code>&amp;</code>與<code>=</code>來分離 key 與 value，瀏覽器的原生<code>&lt;form&gt;</code>表單如果不設置 <code>enctype</code> 屬性，那麼就會以<code>x-www-form-urlencoded</code> 來提交數據，範例如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line"></span><br><span class="line"><span class="dts">firstName=Jeremy<span class="variable">&amp;</span>lastName=<span class="variable">&amp;age</span>=<span class="number">18</span></span></span><br></pre></td></tr></table></figure><p>但 <code>axios</code> 輸出的數據是 <code>json</code> 格式，若我們要轉換成 <code>x-www-form-urlencoded</code> 格式，則需要安裝 <a href="https://github.com/ljharb/qs"><strong><code>qs</code></strong></a> 這個額外套件。</p><h2 id="使用方式（這邊以-Vue-js-來做為安裝範例，使用方式都是一樣的）"><a href="#使用方式（這邊以-Vue-js-來做為安裝範例，使用方式都是一樣的）" class="headerlink" title="使用方式（這邊以 Vue.js 來做為安裝範例，使用方式都是一樣的）"></a>使用方式（這邊以 Vue.js 來做為安裝範例，使用方式都是一樣的）</h2><p>1.安裝套件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install qs</span><br></pre></td></tr></table></figure><ol start="2"><li>引用套件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.prototype.Qs = Qs;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用方式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">firstName</span>: <span class="string">&#x27;Jeremy&#x27;</span>, <span class="attr">lastName</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.Qs.stringify(data));</span><br><span class="line"><span class="comment">//firstName=Jeremy&amp;lastName=&amp;age=18</span></span><br></pre></td></tr></table></figure><h2 id="處理-JSON-中的物件"><a href="#處理-JSON-中的物件" class="headerlink" title="處理 JSON 中的物件"></a>處理 JSON 中的物件</h2><p>上面的方式使用起來很簡單，只要通過一個轉換的方式就可以將數據提交出去，但是如果我們要提交的 json 是像下面這樣呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">person</span>: &#123; <span class="attr">firstName</span>: <span class="string">&#x27;Jeremy&#x27;</span>, <span class="attr">lastName</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="錯誤方式"><a href="#錯誤方式" class="headerlink" title="錯誤方式"></a>錯誤方式</h3><p>我們會以為一樣轉換就可以產生我們要的格式，但是這是不對的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.Qs.stringify(data));</span><br><span class="line"><span class="comment">//person%5BfirstName%5D=Jeremy&amp;person%5BlastName%5D=&amp;person%5Bage%5D=18</span></span><br></pre></td></tr></table></figure><p>如上面 <code>x-www-form-urlencoded</code> 的格式介紹， key 與 value 要使用 <code>&amp;</code> 或是 <code>=</code> 來區隔，我們來看看上面轉換出的格式會發現 person 後面並沒有正常顯示。</p><h3 id="正確方式"><a href="#正確方式" class="headerlink" title="正確方式"></a>正確方式</h3><p>我們要先將 <code>JSON</code> 的物件轉換成 <code>string</code> 再做轉換，這樣才是正確的轉換方式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">person</span>: &#123; <span class="attr">firstName</span>: <span class="string">&#x27;Jeremy&#x27;</span>, <span class="attr">lastName</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="built_in">this</span>.Qs.stringify(&#123;</span><br><span class="line">    <span class="attr">person</span>: <span class="built_in">JSON</span>.stringify(data.person),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//person=%7B%22firstName%22%3A%22Jeremy%22%2C%22lastName%22%3A%22%22%2C%22age%22%3A%2218%22%7D</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h1&gt;&lt;p&gt;axios 是基於 Promise 的瀏覽器與 node.js 的客戶端。使用的方式非常簡單清楚，安裝與使用&lt;a href=&quot;https://github.com/axios/axios&quot;&gt;官方網站&lt;/a&gt;都寫的非常詳細。&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://jeremysu0131.github.io/categories/frontend/"/>
    
    
    <category term="json" scheme="https://jeremysu0131.github.io/tags/json/"/>
    
    <category term="axios" scheme="https://jeremysu0131.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>[Tool] NVM - 升級 node</title>
    <link href="https://jeremysu0131.github.io/Tool-NVM-Node-Version-Manager-%E4%BD%BF%E7%94%A8/"/>
    <id>https://jeremysu0131.github.io/Tool-NVM-Node-Version-Manager-%E4%BD%BF%E7%94%A8/</id>
    <published>2018-11-26T02:08:57.000Z</published>
    <updated>2021-06-24T03:55:08.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="升級-node"><a href="#升級-node" class="headerlink" title="升級 node"></a>升級 node</h2><p>升級其實就是安裝新的 node 且把舊的移除，但如果只用安裝新的會發現先前的 package 都要重新安裝，所以我們執行一下指令來安裝 node 與 package 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm install NEW_VERSION --reinstall-packages-from=OLD_VERSION</span><br><span class="line"></span><br><span class="line"><span class="comment"># nvm install 8.9.3 --reinstall-packages-from=6.12.2</span></span><br></pre></td></tr></table></figure><p>最後移除舊版本即完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall OLD_VERSION</span><br><span class="line"></span><br><span class="line"><span class="comment"># nvm uninstall 6.12.2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;升級-node&quot;&gt;&lt;a href=&quot;#升級-node&quot; class=&quot;headerlink&quot; title=&quot;升級 node&quot;&gt;&lt;/a&gt;升級 node&lt;/h2&gt;&lt;p&gt;升級其實就是安裝新的 node 且把舊的移除，但如果只用安裝新的會發現先前的 package 都要重</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[ESLint] Mocha describe is not defined</title>
    <link href="https://jeremysu0131.github.io/ESLint-Mocha-describe-is-not-defined/"/>
    <id>https://jeremysu0131.github.io/ESLint-Mocha-describe-is-not-defined/</id>
    <published>2018-07-26T02:52:18.000Z</published>
    <updated>2021-06-24T03:55:08.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESLint-for-Test"><a href="#ESLint-for-Test" class="headerlink" title="ESLint for Test"></a>ESLint for Test</h1><p>ESLint 是在團隊中非常重要的程式碼規範工具，可以規範每個人的寫作風格，所以在團隊開發時我會規範大家在專案中全面使用，包括撰寫 test，但在使用<code>mocha</code>, <code>jasmine</code>, <code>mongo</code> 等我們會發現到如下的錯誤：</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ yarn run eslint <span class="built_in">test</span>/**</span><br><span class="line"></span><br><span class="line">yarn run v1.7.0</span><br><span class="line">$ /Users/jeremysu/Documents/Projects/express-test/node_modules/.bin/eslint <span class="built_in">test</span>/routes</span><br><span class="line"></span><br><span class="line">/Users/jeremysu/Documents/Projects/express-test/<span class="built_in">test</span>/routes/index.test.js</span><br><span class="line">   4:1  error  <span class="string">&#x27;describe&#x27;</span> is not defined  no-undef</span><br><span class="line">   5:3  error  <span class="string">&#x27;it&#x27;</span> is not defined        no-undef</span><br><span class="line">  12:1  error  <span class="string">&#x27;describe&#x27;</span> is not defined  no-undef</span><br><span class="line">  13:3  error  <span class="string">&#x27;it&#x27;</span> is not defined        no-undef</span><br><span class="line">✖ 4 problems (4 errors, 0 warnings)</span><br><span class="line"></span><br><span class="line">error Command failed with <span class="built_in">exit</span> code 1.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/run <span class="keyword">for</span> documentation about this <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><h2 id="no-undef-問題"><a href="#no-undef-問題" class="headerlink" title="no-undef 問題"></a>no-undef 問題</h2><p><code>no-undef</code>  這個錯誤代表說，ESLint 不允許使用未宣告的參數，以避免錯誤，詳細內容參考<a href="https://eslint.org/docs/rules/no-undef">這裡</a>，可是在測試中，預設就是用 <code>describe</code> 與 <code>it</code> 來做宣告，這樣要如何解決問題呢？</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>其實解法很簡單，只要在你的 eslint 設定檔中加入如下設定即可使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;mocha&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>env</code> 代表的是你這個專案開發環境的全局變量，所以我們只要把 <code>mocha</code> 設定好，這樣系統就會應用一些 mocha 專用的程式碼，而如果你還有其他套件要使用在專案裡，如 <code>jasmine</code>, <code>jquery</code> 等需要用到一些特別的全域變數，就可以把他放進 env 來讓 ESLint 去解析，更多詳細介紹請看<a href="https://eslint.org/docs/user-guide/configuring#specifying-environments">這裡</a>。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ESLint-for-Test&quot;&gt;&lt;a href=&quot;#ESLint-for-Test&quot; class=&quot;headerlink&quot; title=&quot;ESLint for Test&quot;&gt;&lt;/a&gt;ESLint for Test&lt;/h1&gt;&lt;p&gt;ESLint 是在團隊中非常重要的程式碼規範工具，可以規範每個人的寫作風格，所以在團隊開發時我會規範大家在專案中全面使用，包括撰寫 test，但在使用&lt;code&gt;mocha&lt;/code&gt;, &lt;code&gt;jasmine&lt;/code&gt;, &lt;code&gt;mongo&lt;/code&gt; 等我們會發現到如下的錯誤：&lt;/p&gt;</summary>
    
    
    
    <category term="ESLint" scheme="https://jeremysu0131.github.io/categories/ESLint/"/>
    
    
    <category term="ESLint" scheme="https://jeremysu0131.github.io/tags/ESLint/"/>
    
    <category term="Mocha" scheme="https://jeremysu0131.github.io/tags/Mocha/"/>
    
  </entry>
  
  <entry>
    <title>[Docker] Build A Node.js Image</title>
    <link href="https://jeremysu0131.github.io/Docker-Build-A-Node-js-Image/"/>
    <id>https://jeremysu0131.github.io/Docker-Build-A-Node-js-Image/</id>
    <published>2018-07-23T02:48:03.000Z</published>
    <updated>2021-06-24T03:55:08.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Node-js"><a href="#Docker-Node-js" class="headerlink" title="Docker + Node.js"></a>Docker + Node.js</h1><p>最近開始接觸容器化技術後，開始覺得這是未來的趨勢，於是開始參加與報名了許多課程，而上完課後就是要來實作，所以這邊來紀錄如何將 Node.js 專案建置成 Docker Image。</p><span id="more"></span><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>這邊假設你已經安裝並設定好 Docker ，專案我使用 express-generator 來建置 express 做一個簡單的範例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add express-generator</span><br><span class="line">$ express --no-view --git express-docker <span class="comment">#這裡不使用任何 View 模板</span></span><br><span class="line">$ <span class="built_in">cd</span> express-docker</span><br><span class="line">$ yarn <span class="comment">#安裝 package</span></span><br><span class="line">$ node bin\www <span class="comment">#啟動專案</span></span><br></pre></td></tr></table></figure><p>接著打開瀏覽器輸入 <code>http://localhost:3000</code>，就可以  看到我們的專案正常啟動了。</p><p><img src="/.io//express-index.png" alt="express-index"></p><h2 id="建立-DockerFile"><a href="#建立-DockerFile" class="headerlink" title="建立 DockerFile"></a>建立 DockerFile</h2><p>測試沒問題後，我們就可以了來建立 Dockerfile 了，在專案根目錄中新增 <code>Dockerfile</code> 檔案並貼上以下內容</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Node 的版本</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">8.9</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># Node 環境設定為 production</span></span><br><span class="line"><span class="keyword">ENV</span> NODE_ENV production</span><br><span class="line"></span><br><span class="line"><span class="comment"># Node 在容器內的位置</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 複製 package 設定</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">&quot;package.json&quot;</span>, <span class="string">&quot;yarn.lock&quot;</span>, <span class="string">&quot;./&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝必要的套件並移動到專案的 node_modules 底下</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yarn --production --silent &amp;&amp; mv node_modules ../</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一個 . 是我們本地位置，第二個是 docker 裡面專案的位置，就是將我們專案的程式碼全部複製進去</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 開放對外的 port</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行專案</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> yarn start</span></span><br></pre></td></tr></table></figure><blockquote><p>這邊使用 <code>node:8.9-alpine</code> 是因為這個版本是官方基於 Alpine Linux 來建置的專案，整個容器大小不會超過 5MB（完整版本大約有 600MB）</p></blockquote><h2 id="建立-image"><a href="#建立-image" class="headerlink" title=" 建立 image"></a> 建立 image</h2><p>當我們 Dockerfile 建立好後，就可以來建立 image，開啟你的 terminal 並切換到專案的根目錄下，然後執行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t jeremy/express-docker:1.0.0 .</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon  2.121MB</span><br><span class="line">Step 1/8 : FROM node:8.9-alpine</span><br><span class="line"> ---&gt; 406f227b21f5</span><br><span class="line">Step 2/8 : ENV NODE_ENV production</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; a5f4608e1b01</span><br><span class="line">Step 3/8 : WORKDIR /usr/src/app</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 77f3a6f6ba55</span><br><span class="line">Step 4/8 : COPY [<span class="string">&quot;package.json&quot;</span>, <span class="string">&quot;yarn.lock&quot;</span>, <span class="string">&quot;./&quot;</span>]</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; e382743b8956</span><br><span class="line">Step 5/8 : RUN yarn --production --silent &amp;&amp; mv node_modules ../</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 1b8ea95fa231</span><br><span class="line">Step 6/8 : COPY . .</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 802418a0f972</span><br><span class="line">Step 7/8 : EXPOSE 3000</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 6a6649b4f0b8</span><br><span class="line">Step 8/8 : CMD yarn start</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; a9658953386f</span><br><span class="line">Successfully built a9658953386f</span><br><span class="line">Successfully tagged jeremy/express-docker:1.0.0</span><br></pre></td></tr></table></figure><p>通常在建立是我們會用 -t 這個參數來設定 container 的名稱以及標籤來  簡單的做辨識，而用法是 <code>[名稱]:[標籤]</code>。<br>而從上面的輸出結果我們可以看到，dockr 在建置的時候會按照 <code>Dockerfile</code> 裡面的設定順序來執行，每一行執行成功才會往下執行，最後結果出現編譯成功，再來我們在 terminal 內輸入 <code>docker image ls</code>  來查看剛剛建立的 image。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY            TAG   IMAGE ID     CREATED        SIZE</span><br><span class="line">jeremy/express-docker 1.0.0 a9658953386f 14 seconds ago 74.2MB</span><br></pre></td></tr></table></figure><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><p>接下來我們要來將剛剛建立好的 image 執行起來， 所以執行一下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 3000:3000 jeremy/express-docker:1.0.0</span><br><span class="line">7501cc988eaaac5f38cab9c5d5e1a0dd3d1e5292411c370b46185ce4f6de6751</span><br></pre></td></tr></table></figure><blockquote><p>因為正式在操作時可能會遇到不同版本的 image ， 所以要指定執行哪一個 tag 比較好<br>-d 讓 container 在背景執行，如果拿掉這個參數就會立即在 terminal 上執行<br>-p 指定要使用那個 port ， 第一個是指定 container 對外的 port，第二個是指定對內要到哪一個 port<br>其他設定可以使用 <code>docker run --help</code> 來查看更多設定</p></blockquote><p>最後，我們打開瀏覽器， 網址輸入 <code>http://localhost:3000</code>，就可以看到 express 正常執行了！</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>像這樣的作法算是比較簡單的方式，不過在設定上可能需要下達許多指令，今天先初步了解 Dockerfile 的功能，之後會再介紹如何使用 <code>docker compose</code> ，來對 container 做更細部的設定，讓我們可以針對 port, memory, cpu 等做調整。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Docker-Node-js&quot;&gt;&lt;a href=&quot;#Docker-Node-js&quot; class=&quot;headerlink&quot; title=&quot;Docker + Node.js&quot;&gt;&lt;/a&gt;Docker + Node.js&lt;/h1&gt;&lt;p&gt;最近開始接觸容器化技術後，開始覺得這是未來的趨勢，於是開始參加與報名了許多課程，而上完課後就是要來實作，所以這邊來紀錄如何將 Node.js 專案建置成 Docker Image。&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://jeremysu0131.github.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://jeremysu0131.github.io/tags/Docker/"/>
    
    <category term="Node.js" scheme="https://jeremysu0131.github.io/tags/Node-js/"/>
    
    <category term="Docker Image" scheme="https://jeremysu0131.github.io/tags/Docker-Image/"/>
    
  </entry>
  
  <entry>
    <title>[Docker] 新手使用 VS Code 快速建立 CentOS Container</title>
    <link href="https://jeremysu0131.github.io/Docker-%E6%96%B0%E6%89%8B%E4%BD%BF%E7%94%A8-VSCode-%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B-CentOS-Container/"/>
    <id>https://jeremysu0131.github.io/Docker-%E6%96%B0%E6%89%8B%E4%BD%BF%E7%94%A8-VSCode-%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B-CentOS-Container/</id>
    <published>2018-07-18T02:45:55.000Z</published>
    <updated>2021-06-24T03:55:08.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近開始學習 Docker ，但是在指令操作上總是有點不是那麽熟悉，尤其是在攥寫 DockerFile 時，常常會忘東忘西，實在有點困擾，好在最近 <code>Microsoft</code> 針對 VS Code 開發了一個 <code>Docker</code>套件來讓我們方便操作。</p><span id="more"></span><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><ol><li> 安裝 Docker （安裝方式請針對自己的 OS 來查詢如何安裝）</li><li> 安裝 Visual Studio Code</li><li> 開啓 Visual Studio Code ，點選右邊的 Extension 搜尋 <code>Docker</code> 並安裝</li></ol><p><img src="/.io//installdockerextension.png" alt="installdockerextension"></p><ol start="4"><li> 安裝完成後重啓 VS Code</li></ol><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p><img src="/.io//dockerextension.png" alt="installdockerextension"></p><p>重啓 VS Code 後就可以看到右側多了一個 Docekr 的 Icon 點選後即可查看我們現在有多少 Image 、 Container 已經他們現在的狀態。</p><h3 id="Pull-CentOS-Image"><a href="#Pull-CentOS-Image" class="headerlink" title="Pull CentOS Image"></a>Pull CentOS Image</h3><p>這邊我們來拉取一個 CentOS 的 Image 做操作，首先在終端機中輸入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull centos</span><br><span class="line"></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">7dc0dca2b151: Pull complete</span><br><span class="line">Digest: sha256:b67d21dfe609ddacf404589e04631d90a342921e81c40aeaf3391f6717fa5322</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:latest</span><br></pre></td></tr></table></figure><p>這樣我們就可以在 Docker 瀏覽器中看到我們剛剛拉取下來的 Image</p><p><img src="/.io//dockerimage.png" alt="dockerimage"></p><h3 id="Run-CentOS-Image"><a href="#Run-CentOS-Image" class="headerlink" title="Run CentOS Image"></a>Run CentOS Image</h3><p>接下來對著它按右鍵，點選 <code>Run Interactive</code> 這是 VS Code 就會跳出一串 docker 執行指令，並且已經進入這個 container 中的 bash。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -it centos:latest <span class="comment"># 這行就是docker的啓動指令</span></span><br><span class="line"></span><br><span class="line">[root@1963c65890f5 /] uname <span class="comment"># 這邊已經進入 centos 這個 container 了</span></span><br><span class="line">Linux</span><br></pre></td></tr></table></figure><p>我們可以輸入 exit 或 <code>ctrl+d</code> 離開，這時你就會發現右側在 Containers 的 centos:latest 被移除了，這個原因是因爲 VS Code 的 docker run 指令中包含了 <code>--rm</code> 這個參數，這個意思是：</p><blockquote><p>Automatically remove the container when it exits<br>當執行結束時自動移除這個容器</p></blockquote><p>我在想微軟會這樣設計應該是方便讓開發者測試這樣容器是否可以正常運作，沒問題後就可以再做更多設定，所以我們只要把參數中的 <code>--rm</code> 刪除，在終端機中執行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos:latest</span><br></pre></td></tr></table></figure><p>然後我們輸入 exit 離開，這樣在結束執行容器時我們也可以保留這個容器的資料，在 Docker 瀏覽器中也可以看到現在這個容器顯示紅色 icon，停止的狀態，如果要再次使用這個容器只要右鍵選擇 <code>Restart Container</code> 就可以重啓這個容器，要進入這個容器就右鍵選擇 <code>Attach Shell</code> ，非常簡單。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>我覺得微軟提供這個套件可以然新手簡單的瞭解 Docker 大概是如何運作，Image 與 Container 的觀念也可以快速釐清，而且每一個操作都會有相對應的指令出來，試著去點選操作容器，應該可以提升學習的成效。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近開始學習 Docker ，但是在指令操作上總是有點不是那麽熟悉，尤其是在攥寫 DockerFile 時，常常會忘東忘西，實在有點困擾，好在最近 &lt;code&gt;Microsoft&lt;/code&gt; 針對 VS Code 開發了一個 &lt;code&gt;Docker&lt;/code&gt;套件來讓我們方便操作。&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://jeremysu0131.github.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://jeremysu0131.github.io/tags/Docker/"/>
    
    <category term="Node.js" scheme="https://jeremysu0131.github.io/tags/Node-js/"/>
    
    <category term="VS Code" scheme="https://jeremysu0131.github.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>[Siege] 網站壓力測試工具</title>
    <link href="https://jeremysu0131.github.io/Siege-%E7%B6%B2%E7%AB%99%E5%A3%93%E5%8A%9B%E6%B8%AC%E8%A9%A6%E5%B7%A5%E5%85%B7/"/>
    <id>https://jeremysu0131.github.io/Siege-%E7%B6%B2%E7%AB%99%E5%A3%93%E5%8A%9B%E6%B8%AC%E8%A9%A6%E5%B7%A5%E5%85%B7/</id>
    <published>2018-06-08T01:47:08.000Z</published>
    <updated>2021-06-24T03:55:08.184Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/JoeDog/siege">Siege</a> 是一個簡單易用的網頁負載測試工具，通過設定我們可以在 Mac / Linux 上發送出大量的 request ，來測試開發好的網站穩定度。</p><span id="more"></span><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><ul><li>Mac</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install siege</span><br></pre></td></tr></table></figure><ul><li>Linux<br>Ubuntu 可以使用 <code>apt-get</code> ，CentOS 使用 <code>yum</code> 來安裝</li></ul><h2 id="測試單一連結"><a href="#測試單一連結" class="headerlink" title="測試單一連結"></a>測試單一連結</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">siege -c 100 -r 200 -d1 <span class="string">&#x27;http://google.com.tw&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>-c 同時執行多少個執行緒</li><li>-r 每個執行緒發出的請求</li><li>-d 每個執行緒延遲的時間，預設為 3 秒，如果要測試網站效能建議將時間設定為 1 秒(-d1)</li></ul><h2 id="HTTP-Method"><a href="#HTTP-Method" class="headerlink" title="HTTP Method"></a>HTTP Method</h2><p>我們可以使用 <code>POST</code> <code>PUT</code> <code>DELETE</code> 來測試 API ，以下我們以 POST 來測試網站登錄：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">siege -c 100 -r 200 -d1 <span class="string">&#x27;http://yourwebsite.com POST username=jeremy&amp;password=test123&#x27;</span></span><br></pre></td></tr></table></figure><p>HTTP Method 寫在網址後面，參數寫在最後面</p><h2 id="URLs-File"><a href="#URLs-File" class="headerlink" title="URLs File"></a>URLs File</h2><p>有時我們想要跟加模擬實際使用者使用方式，siege 提供建立一個 .txt 檔來儲存所有要測試的網址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET 測試</span></span><br><span class="line">http://homer.whoohoo.com/index.shtml</span><br><span class="line">http://homer.whoohoo.com/howto.jsp</span><br><span class="line">http://homer.whoohoo.com/cgi-bin/hello.pl?first=bart&amp;last=simpson</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他 Method 測試</span></span><br><span class="line">http://homer.whoohoo.com/cgi-bin/hello.pl POST name=homer</span><br><span class="line">http://homer.whoohoo.com/haha.jsp POST word=doh!&amp;scope=ALL</span><br></pre></td></tr></table></figure><p>建立完檔案後，我們執行以下指令即可運行測試：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">siege -c 100 -r 200 -d1 -f yourfile.txt</span><br></pre></td></tr></table></figure><h2 id="測試報告"><a href="#測試報告" class="headerlink" title="測試報告"></a>測試報告</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Transactions:               507 hits  總共處理次數</span><br><span class="line">Availability:               100.00 %  可用性</span><br><span class="line">Elapsed time:             24.41 secs  運行時間</span><br><span class="line">Data transferred:            0.10 MB  數據傳輸量</span><br><span class="line">Response time:             4.33 secs  響應時間</span><br><span class="line">Transaction rate:    20.77 trans/sec  每秒平均請求次數</span><br><span class="line">Throughput:              0.00 MB/sec  傳輸速度</span><br><span class="line">Concurrency:                   90.04  最高并發連線數</span><br><span class="line">Successful transactions:         507  成功傳輸次數</span><br><span class="line">Failed transactions:               0  失敗傳輸次數</span><br><span class="line">Longest transaction:            5.82  處理傳輸所花最長時間</span><br><span class="line">Shortest transaction:           1.40  處理傳輸最短時間</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/JoeDog/siege&quot;&gt;Siege&lt;/a&gt; 是一個簡單易用的網頁負載測試工具，通過設定我們可以在 Mac / Linux 上發送出大量的 request ，來測試開發好的網站穩定度。&lt;/p&gt;</summary>
    
    
    
    <category term="Test Tool" scheme="https://jeremysu0131.github.io/categories/Test-Tool/"/>
    
    
    <category term="test" scheme="https://jeremysu0131.github.io/tags/test/"/>
    
    <category term="tool" scheme="https://jeremysu0131.github.io/tags/tool/"/>
    
    <category term="load test" scheme="https://jeremysu0131.github.io/tags/load-test/"/>
    
  </entry>
  
  <entry>
    <title>[Postman] 使用 CryptoJS 來操作 MD5 或 Base64</title>
    <link href="https://jeremysu0131.github.io/Postman-CryptoJS-%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%8C%87%E4%BB%A4/"/>
    <id>https://jeremysu0131.github.io/Postman-CryptoJS-%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%8C%87%E4%BB%A4/</id>
    <published>2018-05-22T06:17:04.000Z</published>
    <updated>2021-06-24T03:55:08.184Z</updated>
    
    <content type="html"><![CDATA[<p>Postman 是一個很方便測試 API 的工具，但有時我們會需要使用 base64, MD5 等功能。</p><span id="more"></span><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Encode</span></span><br><span class="line"><span class="keyword">var</span> words = CryptoJS.enc.Utf8.parse(<span class="string">&#x27;Hello CryptoJS&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> base64 = CryptoJS.enc.Base64.stringify(words);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Decode</span></span><br><span class="line"><span class="keyword">let</span> parsedWords = CryptoJS.enc.Base64.parse(base64);</span><br><span class="line"><span class="keyword">let</span> parsedString = parsedWords.toString(CryptoJS.enc.Utf8);</span><br></pre></td></tr></table></figure><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Encode</span></span><br><span class="line"><span class="keyword">var</span> hash = CryptoJS.MD5(str).toString();</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol><li> <a href="https://github.com/brix/crypto-js">crypto-js</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Postman 是一個很方便測試 API 的工具，但有時我們會需要使用 base64, MD5 等功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Postman" scheme="https://jeremysu0131.github.io/categories/Postman/"/>
    
    
    <category term="Postman" scheme="https://jeremysu0131.github.io/tags/Postman/"/>
    
    <category term="CryptoJS" scheme="https://jeremysu0131.github.io/tags/CryptoJS/"/>
    
    <category term="Base64" scheme="https://jeremysu0131.github.io/tags/Base64/"/>
    
    <category term="MD5" scheme="https://jeremysu0131.github.io/tags/MD5/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] Nodemailer 設定 SMTP</title>
    <link href="https://jeremysu0131.github.io/Node-js-Nodemailer-%E8%A8%AD%E5%AE%9A-SMTP/"/>
    <id>https://jeremysu0131.github.io/Node-js-Nodemailer-%E8%A8%AD%E5%AE%9A-SMTP/</id>
    <published>2018-05-02T09:17:16.000Z</published>
    <updated>2021-06-24T03:55:08.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h1><p>由於目前網路上 Nodemailer 的設定都是舊的寫法，新版本已經無法使用，這裡來做一下 Gmail 與其他 SMTP 的設定。</p><span id="more"></span><h2 id="Gmail-程式碼範例"><a href="#Gmail-程式碼範例" class="headerlink" title="Gmail 程式碼範例"></a>Gmail 程式碼範例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodemailer = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">  <span class="attr">service</span>: <span class="string">&#x27;gmail&#x27;</span>,</span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;youremail@gmail.com&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;yourpassword&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mailOptions = &#123;</span><br><span class="line">  <span class="attr">from</span>: <span class="string">&#x27;youremail@gmail.com&#x27;</span>,</span><br><span class="line">  <span class="attr">to</span>: <span class="string">&#x27;myfriend@yahoo.com&#x27;</span>,</span><br><span class="line">  <span class="attr">subject</span>: <span class="string">&#x27;Sending Email using Node.js&#x27;</span>,</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&#x27;That was easy!&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">transporter.sendMail(mailOptions, <span class="function"><span class="keyword">function</span>(<span class="params">error, info</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Email sent: &#x27;</span> + info.response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這邊的程式碼是參考 W3C 的<a href="https://www.w3schools.com/nodejs/nodejs_email.asp">範例</a>，經過測試是可以使用的，但是現在 Gmail 有多了一些設定，所以我們要到 Gmail 內去做一些修改。</p><h3 id="Gmail-設定-IMAP"><a href="#Gmail-設定-IMAP" class="headerlink" title="Gmail 設定 IMAP"></a>Gmail 設定 IMAP</h3><ol><li> 在電腦上開啟 Gmail。</li><li> 點選右上角的「設定」圖示 設定。</li><li> 按一下 [設定]。</li><li> 點選 [轉寄和 POP/IMAP] 分頁。</li><li> 在「IMAP 存取」部分中，選取 [啟用 IMAP]。</li><li> 按一下 [儲存變更]。</li></ol><h3 id="Gmail-設定-APP-passwords"><a href="#Gmail-設定-APP-passwords" class="headerlink" title="Gmail 設定 APP passwords"></a>Gmail 設定 APP passwords</h3><p>接下來，因為把自己的真實賬號密碼放在程式中也會有安全性的問題，所以我們到 Google 去設定一組專門用來寄信的 Key。</p><ol><li>在 Google 首頁右上角點選 <code>我的賬戶</code><br> <img src="/.io//app_password1.png" alt="Step 1"></li><li>選擇 <code>登入和安全性</code><br> <img src="/.io//app_password1.png" alt="Step 1"></li><li>進入設定頁面後，往下找到 <code>App passwords</code> 點選進入<br> <img src="/.io//app_password1.png" alt="Step 1"></li><li> 接下來就可以進入設定頁面，選擇要產生的名稱後按下 <code>Generate</code> ，就會得到一組 key</li></ol><p><img src="/.io//app_password1.png" alt="Step 1"></p><ol start="5"><li> 接下來我們只要把上面程式碼填入我們剛剛得到的 key，就可以正常使用 SMTP 寄信的功能了</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">  <span class="attr">service</span>: <span class="string">&#x27;gmail&#x27;</span>,</span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;youremail@gmail.com&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;取得的 key&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="其他-SMTP-設定"><a href="#其他-SMTP-設定" class="headerlink" title="其他 SMTP 設定"></a>其他 SMTP 設定</h2><p>在公司工作時，基本上會有自己專屬的 email ，所以我們也可以用這組信箱來做設定，但是相關的 資訊可能要跟公司的網管詢問，這邊列出基本要填入的訊息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;mail.domain.com&#x27;</span>, <span class="comment">// Server</span></span><br><span class="line">  <span class="attr">port</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;yourcompany@email&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol><li> <a href="https://www.w3schools.com/nodejs/nodejs_email.asp">W3C</a></li><li> <a href="https://nodemailer.com/smtp/">Nodemailer</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;設定&quot;&gt;&lt;a href=&quot;#設定&quot; class=&quot;headerlink&quot; title=&quot;設定&quot;&gt;&lt;/a&gt;設定&lt;/h1&gt;&lt;p&gt;由於目前網路上 Nodemailer 的設定都是舊的寫法，新版本已經無法使用，這裡來做一下 Gmail 與其他 SMTP 的設定。&lt;/p&gt;</summary>
    
    
    
    <category term="Node.js" scheme="https://jeremysu0131.github.io/categories/nodejs/"/>
    
    
    <category term="Node.js" scheme="https://jeremysu0131.github.io/tags/Node-js/"/>
    
    <category term="Javascript" scheme="https://jeremysu0131.github.io/tags/Javascript/"/>
    
    <category term="SMTP" scheme="https://jeremysu0131.github.io/tags/SMTP/"/>
    
  </entry>
  
  <entry>
    <title>[Vue.js] 父子組件溝通 - $emit / $on</title>
    <link href="https://jeremysu0131.github.io/Vue-js-%E7%88%B6%E5%AD%90%E7%B5%84%E4%BB%B6%E6%BA%9D%E9%80%9A-emit-on/"/>
    <id>https://jeremysu0131.github.io/Vue-js-%E7%88%B6%E5%AD%90%E7%B5%84%E4%BB%B6%E6%BA%9D%E9%80%9A-emit-on/</id>
    <published>2018-04-29T12:58:44.000Z</published>
    <updated>2021-06-24T03:55:08.201Z</updated>
    
    <content type="html"><![CDATA[<p>每次都記不起來要如何在子組件中呼叫父組件，這邊來做個備忘錄</p><span id="more"></span><p>父組件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-on:childMethod</span>=<span class="string">&quot;parentMethod&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./components/Child&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    Child,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">parentMethod</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子組件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>Emit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;childMethod&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;每次都記不起來要如何在子組件中呼叫父組件，這邊來做個備忘錄&lt;/p&gt;</summary>
    
    
    
    <category term="Vue.js" scheme="https://jeremysu0131.github.io/categories/vuejs/"/>
    
    
    <category term="Vue" scheme="https://jeremysu0131.github.io/tags/Vue/"/>
    
    <category term="Vue.js" scheme="https://jeremysu0131.github.io/tags/Vue-js/"/>
    
    <category term="props" scheme="https://jeremysu0131.github.io/tags/props/"/>
    
    <category term="components" scheme="https://jeremysu0131.github.io/tags/components/"/>
    
    <category term="parent" scheme="https://jeremysu0131.github.io/tags/parent/"/>
    
    <category term="child" scheme="https://jeremysu0131.github.io/tags/child/"/>
    
    <category term="communication" scheme="https://jeremysu0131.github.io/tags/communication/"/>
    
  </entry>
  
  <entry>
    <title>[Vue.js] 使用 babel-polyfill 讓 IE 正常運作</title>
    <link href="https://jeremysu0131.github.io/Vue-js-%E5%9C%A8-Webpack-%E4%B8%AD%E5%8A%A0%E5%85%A5-babel-polyfill/"/>
    <id>https://jeremysu0131.github.io/Vue-js-%E5%9C%A8-Webpack-%E4%B8%AD%E5%8A%A0%E5%85%A5-babel-polyfill/</id>
    <published>2018-04-24T08:19:39.000Z</published>
    <updated>2021-06-24T03:55:08.201Z</updated>
    
    <content type="html"><![CDATA[<p>IE 是許多前端工程師的夢靨，在 Vue 中我們會使用 axios 來存取 api ，但是 axios 會使用到 ES6 的 Promise ，所以 IE 會沒有辦法支援，因此我們要用 babel-polyfill 來將 ES6 的語法轉到 ES5。</p><span id="more"></span><h1 id="安裝-babel-polyfill"><a href="#安裝-babel-polyfill" class="headerlink" title="安裝 babel-polyfill"></a>安裝 babel-polyfill</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>因爲 polyfill 要在編譯你的程式碼之前執行，所以要安裝為 <code>dependency</code> 而不是 <code>devDependency</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-polyfill <span class="comment">#yarn add babel-polyfill</span></span><br></pre></td></tr></table></figure><h1 id="在-Webpack-中設定"><a href="#在-Webpack-中設定" class="headerlink" title="在 Webpack 中設定"></a>在 Webpack 中設定</h1><p>開啟 <code>./build/webpack.base.conf.js</code>，在下面的 <code>entry</code> 中加入一行程式碼 <code>polyfill: &#39;babel-polyfill&#39;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">   <span class="attr">app</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>更改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: [<span class="string">&#x27;babel-polyfill&#x27;</span>, <span class="string">&#x27;./src/main.js&#x27;</span>];</span><br></pre></td></tr></table></figure><p>這樣就可以在 IE 中使用 axios 了！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;IE 是許多前端工程師的夢靨，在 Vue 中我們會使用 axios 來存取 api ，但是 axios 會使用到 ES6 的 Promise ，所以 IE 會沒有辦法支援，因此我們要用 babel-polyfill 來將 ES6 的語法轉到 ES5。&lt;/p&gt;</summary>
    
    
    
    <category term="Vue.js" scheme="https://jeremysu0131.github.io/categories/vuejs/"/>
    
    
    <category term="Vue" scheme="https://jeremysu0131.github.io/tags/Vue/"/>
    
    <category term="Vue.js" scheme="https://jeremysu0131.github.io/tags/Vue-js/"/>
    
    <category term="vue-cli" scheme="https://jeremysu0131.github.io/tags/vue-cli/"/>
    
    <category term="Webpack" scheme="https://jeremysu0131.github.io/tags/Webpack/"/>
    
    <category term="babel-polyfill" scheme="https://jeremysu0131.github.io/tags/babel-polyfill/"/>
    
    <category term="axios" scheme="https://jeremysu0131.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] MySQL with Promise 處理非同步問題</title>
    <link href="https://jeremysu0131.github.io/Node-js-MySQL-with-Promise-%E8%A8%AD%E5%AE%9A/"/>
    <id>https://jeremysu0131.github.io/Node-js-MySQL-with-Promise-%E8%A8%AD%E5%AE%9A/</id>
    <published>2018-04-22T09:40:06.000Z</published>
    <updated>2021-06-24T03:55:08.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h2><p>在 Node.js 中使用 callback 來處理 MySQL Query 會使程式碼看起來很凌亂，也是被人詬病的 <code>Callback Hell</code>：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./configs/mysql.js</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">  <span class="attr">connectionLimit</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;database&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryUserByCity = <span class="function">(<span class="params">city, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  pool.query(</span><br><span class="line">    <span class="string">&#x27;SELECT name FROM users WHERE city = ? ;&#x27;</span>,</span><br><span class="line">    city,</span><br><span class="line">    <span class="function">(<span class="params">err, rows, fields</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) callback(err);</span><br><span class="line">      <span class="keyword">else</span> callback(<span class="literal">null</span>, rows);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123; queryUserByCity &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./routes/index.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">&#x27;../configs/mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line">  db.queryUserByCity(<span class="string">&#x27;高雄&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) res.status(<span class="number">500</span>); <span class="comment">// 每一次都要做錯誤處理</span></span><br><span class="line">    data.push(results);</span><br><span class="line">    db.queryUserByCity(<span class="string">&#x27;台南&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) res.status(<span class="number">500</span>); <span class="comment">// 每一次都要做錯誤處理</span></span><br><span class="line">      data.push(results);</span><br><span class="line">      db.queryUserByCity(<span class="string">&#x27;屏東&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) res.status(<span class="number">500</span>); <span class="comment">// 每一次都要做錯誤處理</span></span><br><span class="line">        data.push(results);</span><br><span class="line">        res.json(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>上面的程式碼看起來很亂，可讀性比較不佳，但如果用 Promise 的方式來做，則程式碼看起來會比較整齊，並且在 catch 錯誤時，只要寫一次就可以了，不用再一一確認。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./configs/mysql.js</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">  <span class="attr">connectionLimit</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;database&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryUserByCity = <span class="function"><span class="params">city</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    pool.query(</span><br><span class="line">      <span class="string">&#x27;SELECT name FROM users WHERE city = ? ;&#x27;</span>,</span><br><span class="line">      city,</span><br><span class="line">      <span class="function">(<span class="params">err, rows, fields</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(rows);</span><br><span class="line">        <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">        <span class="keyword">else</span> resolve(rows);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; queryUserByCity &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./routes/index.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">&#x27;../configs/mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = [];</span><br><span class="line">  db</span><br><span class="line">    .queryUserByCity(<span class="string">&#x27;高雄&#x27;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">      data.push(results);</span><br><span class="line">      <span class="keyword">return</span> db.queryUserByCity(<span class="string">&#x27;台南&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">      data.push(results);</span><br><span class="line">      <span class="keyword">return</span> db.queryUserByCity(<span class="string">&#x27;屏東&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">      data.push(results);</span><br><span class="line">      res.json(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// Promise 只要使用一次即可 catch 所有錯誤</span></span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      res.status(<span class="number">500</span>).json(&#123; <span class="attr">message</span>: <span class="string">&#x27;Server error&#x27;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Callback&quot;&gt;&lt;a href=&quot;#Callback&quot; class=&quot;headerlink&quot; title=&quot;Callback&quot;&gt;&lt;/a&gt;Callback&lt;/h2&gt;&lt;p&gt;在 Node.js 中使用 callback 來處理 MySQL Query 會使程式碼看起來很凌亂，也是被人詬病的 &lt;code&gt;Callback Hell&lt;/code&gt;：&lt;/p&gt;</summary>
    
    
    
    <category term="Node.js" scheme="https://jeremysu0131.github.io/categories/nodejs/"/>
    
    
    <category term="Node.js" scheme="https://jeremysu0131.github.io/tags/Node-js/"/>
    
    <category term="MySQL" scheme="https://jeremysu0131.github.io/tags/MySQL/"/>
    
    <category term="Javascript" scheme="https://jeremysu0131.github.io/tags/Javascript/"/>
    
    <category term="Promise" scheme="https://jeremysu0131.github.io/tags/Promise/"/>
    
    <category term="ES6" scheme="https://jeremysu0131.github.io/tags/ES6/"/>
    
    <category term="Asynchronous" scheme="https://jeremysu0131.github.io/tags/Asynchronous/"/>
    
  </entry>
  
  <entry>
    <title>[VMWare] 設定虛擬機 ip</title>
    <link href="https://jeremysu0131.github.io/VMWare-%E8%A8%AD%E5%AE%9A%E8%99%9B%E6%93%AC%E6%A9%9F-ip/"/>
    <id>https://jeremysu0131.github.io/VMWare-%E8%A8%AD%E5%AE%9A%E8%99%9B%E6%93%AC%E6%A9%9F-ip/</id>
    <published>2018-02-07T02:23:15.000Z</published>
    <updated>2021-06-24T03:55:08.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="確定虛擬機網路設定"><a href="#確定虛擬機網路設定" class="headerlink" title="確定虛擬機網路設定"></a>確定虛擬機網路設定</h2><p>這邊要先確定虛擬機的網路設定是 NAT 。</p><span id="more"></span><p><img src="/.io//vm.png" alt="vm net setting"></p><h2 id="VMnet8"><a href="#VMnet8" class="headerlink" title="VMnet8"></a>VMnet8</h2><p>到網際網路中找到 VMnet8 ，看看是否有啟動，另外進入設定 IP ，這裡的 IP 位置就是未來虛擬機中的網段。</p><p><img src="/.io//vmnet8.png" alt="vm net 8 setting"></p><h2 id="到虛擬機中的作業系統設定-ip"><a href="#到虛擬機中的作業系統設定-ip" class="headerlink" title="到虛擬機中的作業系統設定 ip"></a>到虛擬機中的作業系統設定 ip</h2><p>這邊以 CentOS 7 為例：</p><ol><li>檢查 Network Manager 是否啟動</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status NetworkManager.service</span><br></pre></td></tr></table></figure><ol start="2"><li>檢查網卡，綠色顯示的為使用中的，我們要設定的就是這張</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli dev status</span><br></pre></td></tr></table></figure><ol start="3"><li>進入 nmtui 設定網路，若沒有則安裝 <code>yum install NetworkManager-tui</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmtui 你的網路卡名稱</span><br></pre></td></tr></table></figure><p>將 <code>IPv4 CONFIGURATION</code> 的 <code>Automatic</code> 改成 <code>Manual</code> ，然後按下旁邊的 <code>Show</code> ，即可設定固定 ip ，記得網段要跟先前 VMnet8 中設定的一樣。<br><img src="/.io//nmtui.png" alt="vm net setting"></p><ol start="4"><li>重新啟動網路</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure><ol start="5"><li>檢查設定是否生效</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip add</span><br></pre></td></tr></table></figure><h3 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h3><blockquote><ul><li><a href="http://www.cnblogs.com/objectorl/archive/2012/09/27/vmware-ubuntu-nat-static-ip-settings.html">VMWare 虚拟机下为 Ubuntu 12.04.1 配置静态 IP（NAT 方式）</a></li><li><a href="https://www.phpini.com/linux/rhel-centos-7-setup-static-ip">RHEL / CentOS 7 設定網路固定 IP</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;確定虛擬機網路設定&quot;&gt;&lt;a href=&quot;#確定虛擬機網路設定&quot; class=&quot;headerlink&quot; title=&quot;確定虛擬機網路設定&quot;&gt;&lt;/a&gt;確定虛擬機網路設定&lt;/h2&gt;&lt;p&gt;這邊要先確定虛擬機的網路設定是 NAT 。&lt;/p&gt;</summary>
    
    
    
    <category term="Tool" scheme="https://jeremysu0131.github.io/categories/Tool/"/>
    
    
    <category term="VMWare" scheme="https://jeremysu0131.github.io/tags/VMWare/"/>
    
    <category term="net" scheme="https://jeremysu0131.github.io/tags/net/"/>
    
    <category term="ip" scheme="https://jeremysu0131.github.io/tags/ip/"/>
    
    <category term="CentOS" scheme="https://jeremysu0131.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>[Vue.js] Vuex 學習筆記 (20) - Cheat Sheet 與結語</title>
    <link href="https://jeremysu0131.github.io/Vue-js-Vuex-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-20-Cheat-Sheet-%E8%88%87%E7%B5%90%E8%AA%9E/"/>
    <id>https://jeremysu0131.github.io/Vue-js-Vuex-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-20-Cheat-Sheet-%E8%88%87%E7%B5%90%E8%AA%9E/</id>
    <published>2018-01-19T13:43:33.000Z</published>
    <updated>2021-06-24T03:55:08.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cheat-Sheet"><a href="#Cheat-Sheet" class="headerlink" title="Cheat Sheet"></a>Cheat Sheet</h1><p>這邊分享一個美觀又實用的 <a href="https://vuejs-tips.github.io/vuex-cheatsheet/">Vuex Cheat Sheet</a> ，作者將 Vuex 會用到的功能全部列在清單中，對於我這種今天看完明天就忘記，有記憶障礙的人非常實用 😄。</p><span id="more"></span><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>這是我第一次參加鐵人賽，也是第一次寫這麼長的文章，當初只是在學習 Vuex 時看到 IT 邦的鐵人賽要開始了，於是就抱著給自己一點目標及壓力來提升學習效率來參加，沒有任何規劃及經驗就衝下去了。</p><p>不過沒想到我以為很難且複雜的 Vuex 其實架構很簡單，大概讀到第九篇就可以將 Vuex 摸熟 7、8 成了，導致於後面的文章有點開天窗，而接近年前又是工作上許多專案的交件時間，所以沒辦法好好的寫上一個架構比較完整的購物車或是 To-do list 範例，而只有針對一些特定的功能來做說明。</p><p>感謝願意花時間閱讀我這些文章的人們，如果有覺得那些地方寫的不清楚會或是有誤，也請你們不吝於跟我説，前端之路一起加油。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Cheat-Sheet&quot;&gt;&lt;a href=&quot;#Cheat-Sheet&quot; class=&quot;headerlink&quot; title=&quot;Cheat Sheet&quot;&gt;&lt;/a&gt;Cheat Sheet&lt;/h1&gt;&lt;p&gt;這邊分享一個美觀又實用的 &lt;a href=&quot;https://vuejs-tips.github.io/vuex-cheatsheet/&quot;&gt;Vuex Cheat Sheet&lt;/a&gt; ，作者將 Vuex 會用到的功能全部列在清單中，對於我這種今天看完明天就忘記，有記憶障礙的人非常實用 😄。&lt;/p&gt;</summary>
    
    
    
    <category term="Vue.js" scheme="https://jeremysu0131.github.io/categories/vuejs/"/>
    
    
    <category term="Vue" scheme="https://jeremysu0131.github.io/tags/Vue/"/>
    
    <category term="Vue.js" scheme="https://jeremysu0131.github.io/tags/Vue-js/"/>
    
    <category term="vue-cli" scheme="https://jeremysu0131.github.io/tags/vue-cli/"/>
    
    <category term="Vuex" scheme="https://jeremysu0131.github.io/tags/Vuex/"/>
    
    <category term="cheat sheet" scheme="https://jeremysu0131.github.io/tags/cheat-sheet/"/>
    
  </entry>
  
  <entry>
    <title>[Vue.js] Vuex 學習筆記 (19) - 實用插件 plugin</title>
    <link href="https://jeremysu0131.github.io/Vue-js-Vuex-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-19-%E5%AF%A6%E7%94%A8-plugin/"/>
    <id>https://jeremysu0131.github.io/Vue-js-Vuex-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-19-%E5%AF%A6%E7%94%A8-plugin/</id>
    <published>2018-01-19T12:43:42.000Z</published>
    <updated>2021-06-24T03:55:08.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h1><p>前面有稍微提到如何使用 plugin ，不過我們有時候並不需要自己來建輪子， GitHub 上已經有很多人開發中出方便實用的工具，我們可以善加利用來減少開發的時間，下面列出我覺得比較實用的套件：</p><span id="more"></span><h2 id="1-vuex-persistedstate"><a href="#1-vuex-persistedstate" class="headerlink" title="1. vuex-persistedstate"></a>1. vuex-persistedstate</h2><p><a href="https://github.com/robinvdvleuten/vuex-persistedstate">vuex-persistedstate</a> 是一個將 Vuex 的狀態保存在 localStorage 的套件。</p><h2 id="2-vuex-i18n"><a href="#2-vuex-i18n" class="headerlink" title="2. vuex-i18n"></a>2. vuex-i18n</h2><p><a href="https://github.com/dkfbasel/vuex-i18n">vuex-i18n</a> 這是一個很好用的多語言套件，它可以將我們編輯好的多語系檔案儲存在 Vuex 中，方便系統取用。</p><h2 id="3-vuex-loading"><a href="#3-vuex-loading" class="headerlink" title="3. vuex-loading"></a>3. vuex-loading</h2><p><a href="https://github.com/f/vuex-loading">vuex-loading</a> 是一個可以管理複雜 loading 的套件，當我們有多個 state 需要在頁面多個地方使用及同時讀取及更新時，我們可以使用這個套件來做管理。</p><h2 id="4-vuex-cache"><a href="#4-vuex-cache" class="headerlink" title="4. vuex-cache"></a>4. vuex-cache</h2><p><a href="https://github.com/superwf/vuex-cache">vuex-cache</a> 這個套件可以將 action 執行完取得的結果暫存起來，這樣當下次我們需要調用這個套件時， vuex-cache 會直接到 cache 內取得先前的結果。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Plugin&quot;&gt;&lt;a href=&quot;#Plugin&quot; class=&quot;headerlink&quot; title=&quot;Plugin&quot;&gt;&lt;/a&gt;Plugin&lt;/h1&gt;&lt;p&gt;前面有稍微提到如何使用 plugin ，不過我們有時候並不需要自己來建輪子， GitHub 上已經有很多人開發中出方便實用的工具，我們可以善加利用來減少開發的時間，下面列出我覺得比較實用的套件：&lt;/p&gt;</summary>
    
    
    
    <category term="Vue.js" scheme="https://jeremysu0131.github.io/categories/vuejs/"/>
    
    
    <category term="Vue" scheme="https://jeremysu0131.github.io/tags/Vue/"/>
    
    <category term="Vue.js" scheme="https://jeremysu0131.github.io/tags/Vue-js/"/>
    
    <category term="vue-cli" scheme="https://jeremysu0131.github.io/tags/vue-cli/"/>
    
    <category term="Vuex" scheme="https://jeremysu0131.github.io/tags/Vuex/"/>
    
    <category term="plugin" scheme="https://jeremysu0131.github.io/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>[Vue.js] Vuex 學習筆記 (18) - 開發工具 Vue.js devtools</title>
    <link href="https://jeremysu0131.github.io/Vue-js-Vuex-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-18-%E9%96%8B%E7%99%BC%E5%B7%A5%E5%85%B7-Vue-js-devtools/"/>
    <id>https://jeremysu0131.github.io/Vue-js-Vuex-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-18-%E9%96%8B%E7%99%BC%E5%B7%A5%E5%85%B7-Vue-js-devtools/</id>
    <published>2018-01-17T09:15:41.000Z</published>
    <updated>2021-06-24T03:55:08.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-devtools"><a href="#Vue-js-devtools" class="headerlink" title="Vue.js devtools"></a>Vue.js devtools</h1><p><strong>Vue.js devtools</strong> 是一個在開發時很實用的 Chrome 套件，我們可以在裡面檢查組件的資料，也可以查看 Vuex 的事件與資料變化。</p><span id="more"></span><p><img src="/.io//Vuejs-devtools.PNG" alt="preview"></p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>使用方式也很簡單，我們使用 Chrome 開啟下面鏈接後安裝完即可使用<br><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">下載位置</a></p><h2 id="在-Vuex-中使用"><a href="#在-Vuex-中使用" class="headerlink" title="在 Vuex 中使用"></a>在 Vuex 中使用</h2><p>我們可以開啟 Chrome 的 Developer Tools 之後就可以在最上面的選單列看到 <code>Vue</code> 這個欄位，點擊後就可以使用了。</p><ol><li>Component 中我們可以查看組件的參數在操作中的變化，省去使用 console 的時間。</li><li> Vuex 中的功能更是強大，每一個 mutation 呼叫時都會被記錄在其中，而點選其中的 mutation 時，還會顯示當下的數據，所以當要查看資料的變化時，是一個非常實用的功能。</li></ol><p><img src="https://raw.githubusercontent.com/vuejs/vue-devtools/master/media/demo.gif" alt="demo"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue-js-devtools&quot;&gt;&lt;a href=&quot;#Vue-js-devtools&quot; class=&quot;headerlink&quot; title=&quot;Vue.js devtools&quot;&gt;&lt;/a&gt;Vue.js devtools&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Vue.js devtools&lt;/strong&gt; 是一個在開發時很實用的 Chrome 套件，我們可以在裡面檢查組件的資料，也可以查看 Vuex 的事件與資料變化。&lt;/p&gt;</summary>
    
    
    
    <category term="Vue.js" scheme="https://jeremysu0131.github.io/categories/vuejs/"/>
    
    
    <category term="Vue" scheme="https://jeremysu0131.github.io/tags/Vue/"/>
    
    <category term="Vue.js" scheme="https://jeremysu0131.github.io/tags/Vue-js/"/>
    
    <category term="vue-cli" scheme="https://jeremysu0131.github.io/tags/vue-cli/"/>
    
    <category term="Vuex" scheme="https://jeremysu0131.github.io/tags/Vuex/"/>
    
    <category term="devTool" scheme="https://jeremysu0131.github.io/tags/devTool/"/>
    
  </entry>
  
</feed>
